### YamlMime:ManagedReference
items:
- uid: SRLApiClient.Endpoints.Players.PlayersClient
  commentId: T:SRLApiClient.Endpoints.Players.PlayersClient
  id: PlayersClient
  parent: SRLApiClient.Endpoints.Players
  children:
  - SRLApiClient.Endpoints.Players.PlayersClient.#ctor(SRLApiClient.SRLClient)
  - SRLApiClient.Endpoints.Players.PlayersClient.Edit(System.String,System.String,System.String,System.String,SRLApiClient.Endpoints.StreamApi,System.String,System.String)
  - SRLApiClient.Endpoints.Players.PlayersClient.Get(System.String)
  - SRLApiClient.Endpoints.Players.PlayersClient.GetAsync(System.String)
  - SRLApiClient.Endpoints.Players.PlayersClient.Search(System.String)
  - SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync(System.String)
  langs:
  - csharp
  - vb
  name: PlayersClient
  nameWithType: PlayersClient
  fullName: SRLApiClient.Endpoints.Players.PlayersClient
  type: Class
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: PlayersClient
    path: Endpoints/Players/PlayersClient.cs
    startLine: 12
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nA client to perform requests on the /players endpoint\n"
  example: []
  syntax:
    content: 'public class PlayersClient : SRLEndpoint'
    content.vb: >-
      Public Class PlayersClient
          Inherits SRLEndpoint
  inheritance:
  - System.Object
  - SRLApiClient.Endpoints.SRLEndpoint
  inheritedMembers:
  - SRLApiClient.Endpoints.SRLEndpoint.BasePath
  - SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SRLApiClient.Endpoints.Players.PlayersClient.#ctor(SRLApiClient.SRLClient)
  commentId: M:SRLApiClient.Endpoints.Players.PlayersClient.#ctor(SRLApiClient.SRLClient)
  id: '#ctor(SRLApiClient.SRLClient)'
  parent: SRLApiClient.Endpoints.Players.PlayersClient
  langs:
  - csharp
  - vb
  name: PlayersClient(SRLClient)
  nameWithType: PlayersClient.PlayersClient(SRLClient)
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.PlayersClient(SRLApiClient.SRLClient)
  type: Constructor
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: .ctor
    path: Endpoints/Players/PlayersClient.cs
    startLine: 18
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nCreates a new client to perform requests on the /players endpoint\n"
  example: []
  syntax:
    content: public PlayersClient(SRLClient baseClient)
    parameters:
    - id: baseClient
      type: SRLApiClient.SRLClient
      description: The <xref href="SRLApiClient.SRLClient" data-throw-if-not-resolved="false"></xref> used to perform requests
    content.vb: Public Sub New(baseClient As SRLClient)
  overload: SRLApiClient.Endpoints.Players.PlayersClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Players.PlayersClient.Get(System.String)
  commentId: M:SRLApiClient.Endpoints.Players.PlayersClient.Get(System.String)
  id: Get(System.String)
  parent: SRLApiClient.Endpoints.Players.PlayersClient
  langs:
  - csharp
  - vb
  name: Get(String)
  nameWithType: PlayersClient.Get(String)
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.Get(System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: Get
    path: Endpoints/Players/PlayersClient.cs
    startLine: 25
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nGets a single player synchronously\n"
  example: []
  syntax:
    content: public Player Get(string name)
    parameters:
    - id: name
      type: System.String
      description: The players name
    return:
      type: SRLApiClient.Endpoints.Players.Player
      description: Returns the player
    content.vb: Public Function Get(name As String) As Player
  overload: SRLApiClient.Endpoints.Players.PlayersClient.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Players.PlayersClient.GetAsync(System.String)
  commentId: M:SRLApiClient.Endpoints.Players.PlayersClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: SRLApiClient.Endpoints.Players.PlayersClient
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  nameWithType: PlayersClient.GetAsync(String)
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: GetAsync
    path: Endpoints/Players/PlayersClient.cs
    startLine: 33
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nGets a single player asynchronously\n"
  example: []
  syntax:
    content: public Task<Player> GetAsync(string name)
    parameters:
    - id: name
      type: System.String
      description: The players name
    return:
      type: Task{SRLApiClient.Endpoints.Players.Player}
      description: Returns the player
    content.vb: Public Function GetAsync(name As String) As Task(Of Player)
  overload: SRLApiClient.Endpoints.Players.PlayersClient.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Players.PlayersClient.Search(System.String)
  commentId: M:SRLApiClient.Endpoints.Players.PlayersClient.Search(System.String)
  id: Search(System.String)
  parent: SRLApiClient.Endpoints.Players.PlayersClient
  langs:
  - csharp
  - vb
  name: Search(String)
  nameWithType: PlayersClient.Search(String)
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.Search(System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: Search
    path: Endpoints/Players/PlayersClient.cs
    startLine: 50
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nSearches a player synchronously\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<Player> Search(string name)
    parameters:
    - id: name
      type: System.String
      description: The players name
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Players.Player}
      description: List of players matching the queried name
    content.vb: Public Function Search(name As String) As ReadOnlyCollection(Of Player)
  overload: SRLApiClient.Endpoints.Players.PlayersClient.Search*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync(System.String)
  commentId: M:SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync(System.String)
  id: SearchAsync(System.String)
  parent: SRLApiClient.Endpoints.Players.PlayersClient
  langs:
  - csharp
  - vb
  name: SearchAsync(String)
  nameWithType: PlayersClient.SearchAsync(String)
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync(System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: SearchAsync
    path: Endpoints/Players/PlayersClient.cs
    startLine: 61
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nSearches a player asynchronously\n"
  example: []
  syntax:
    content: public Task<ReadOnlyCollection<Player>> SearchAsync(string name)
    parameters:
    - id: name
      type: System.String
      description: The players name
    return:
      type: Task{ReadOnlyCollection{SRLApiClient.Endpoints.Players.Player}}
      description: List of players matching the queried name
    content.vb: Public Function SearchAsync(name As String) As Task(Of ReadOnlyCollection(Of Player))
  overload: SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Players.PlayersClient.Edit(System.String,System.String,System.String,System.String,SRLApiClient.Endpoints.StreamApi,System.String,System.String)
  commentId: M:SRLApiClient.Endpoints.Players.PlayersClient.Edit(System.String,System.String,System.String,System.String,SRLApiClient.Endpoints.StreamApi,System.String,System.String)
  id: Edit(System.String,System.String,System.String,System.String,SRLApiClient.Endpoints.StreamApi,System.String,System.String)
  parent: SRLApiClient.Endpoints.Players.PlayersClient
  langs:
  - csharp
  - vb
  name: Edit(String, String, String, String, StreamApi, String, String)
  nameWithType: PlayersClient.Edit(String, String, String, String, StreamApi, String, String)
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.Edit(System.String, System.String, System.String, System.String, SRLApiClient.Endpoints.StreamApi, System.String, System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Players/PlayersClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: Edit
    path: Endpoints/Players/PlayersClient.cs
    startLine: 80
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Players
  summary: "\nEdits a players profile\n"
  example: []
  syntax:
    content: public bool Edit(string playerName, string youtube = null, string twitter = null, string channel = null, StreamApi api = StreamApi.Unknown, string country = null, string casename = null)
    parameters:
    - id: playerName
      type: System.String
      description: The players name
    - id: youtube
      type: System.String
      description: The new youtube channel
    - id: twitter
      type: System.String
      description: The new twitter name
    - id: channel
      type: System.String
      description: The new streaming channel
    - id: api
      type: SRLApiClient.Endpoints.StreamApi
      description: The new Streaming API
    - id: country
      type: System.String
      description: The new Country
    - id: casename
      type: System.String
      description: The new name capitalization
    return:
      type: System.Boolean
      description: Returns true on success
    content.vb: Public Function Edit(playerName As String, youtube As String = Nothing, twitter As String = Nothing, channel As String = Nothing, api As StreamApi = StreamApi.Unknown, country As String = Nothing, casename As String = Nothing) As Boolean
  overload: SRLApiClient.Endpoints.Players.PlayersClient.Edit*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SRLApiClient.Endpoints.Players
  commentId: N:SRLApiClient.Endpoints.Players
  name: SRLApiClient.Endpoints.Players
  nameWithType: SRLApiClient.Endpoints.Players
  fullName: SRLApiClient.Endpoints.Players
- uid: SRLApiClient.Endpoints.SRLEndpoint
  commentId: T:SRLApiClient.Endpoints.SRLEndpoint
  parent: SRLApiClient.Endpoints
  name: SRLEndpoint
  nameWithType: SRLEndpoint
  fullName: SRLApiClient.Endpoints.SRLEndpoint
- uid: SRLApiClient.Endpoints.SRLEndpoint.BasePath
  commentId: P:SRLApiClient.Endpoints.SRLEndpoint.BasePath
  parent: SRLApiClient.Endpoints.SRLEndpoint
  name: BasePath
  nameWithType: SRLEndpoint.BasePath
  fullName: SRLApiClient.Endpoints.SRLEndpoint.BasePath
- uid: SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  commentId: P:SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  parent: SRLApiClient.Endpoints.SRLEndpoint
  name: SrlClient
  nameWithType: SRLEndpoint.SrlClient
  fullName: SRLApiClient.Endpoints.SRLEndpoint.SrlClient
- uid: SRLApiClient.Endpoints
  commentId: N:SRLApiClient.Endpoints
  name: SRLApiClient.Endpoints
  nameWithType: SRLApiClient.Endpoints
  fullName: SRLApiClient.Endpoints
- uid: SRLApiClient.SRLClient
  commentId: T:SRLApiClient.SRLClient
  parent: SRLApiClient
  name: SRLClient
  nameWithType: SRLClient
  fullName: SRLApiClient.SRLClient
- uid: SRLApiClient.Endpoints.Players.PlayersClient.#ctor*
  commentId: Overload:SRLApiClient.Endpoints.Players.PlayersClient.#ctor
  name: PlayersClient
  nameWithType: PlayersClient.PlayersClient
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.PlayersClient
- uid: SRLApiClient
  commentId: N:SRLApiClient
  name: SRLApiClient
  nameWithType: SRLApiClient
  fullName: SRLApiClient
- uid: SRLApiClient.Endpoints.Players.PlayersClient.Get*
  commentId: Overload:SRLApiClient.Endpoints.Players.PlayersClient.Get
  name: Get
  nameWithType: PlayersClient.Get
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.Get
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SRLApiClient.Endpoints.Players.Player
  commentId: T:SRLApiClient.Endpoints.Players.Player
  parent: SRLApiClient.Endpoints.Players
  name: Player
  nameWithType: Player
  fullName: SRLApiClient.Endpoints.Players.Player
- uid: SRLApiClient.Endpoints.Players.PlayersClient.GetAsync*
  commentId: Overload:SRLApiClient.Endpoints.Players.PlayersClient.GetAsync
  name: GetAsync
  nameWithType: PlayersClient.GetAsync
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.GetAsync
- uid: Task{SRLApiClient.Endpoints.Players.Player}
  commentId: '!:Task{SRLApiClient.Endpoints.Players.Player}'
  definition: Task`1
  name: Task<Player>
  nameWithType: Task<Player>
  fullName: Task<SRLApiClient.Endpoints.Players.Player>
  nameWithType.vb: Task(Of Player)
  fullName.vb: Task(Of SRLApiClient.Endpoints.Players.Player)
  name.vb: Task(Of Player)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.Players.Player
    name: Player
    nameWithType: Player
    fullName: SRLApiClient.Endpoints.Players.Player
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.Players.Player
    name: Player
    nameWithType: Player
    fullName: SRLApiClient.Endpoints.Players.Player
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Endpoints.Players.PlayersClient.Search*
  commentId: Overload:SRLApiClient.Endpoints.Players.PlayersClient.Search
  name: Search
  nameWithType: PlayersClient.Search
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.Search
- uid: ReadOnlyCollection{SRLApiClient.Endpoints.Players.Player}
  commentId: '!:ReadOnlyCollection{SRLApiClient.Endpoints.Players.Player}'
  definition: ReadOnlyCollection`1
  name: ReadOnlyCollection<Player>
  nameWithType: ReadOnlyCollection<Player>
  fullName: ReadOnlyCollection<SRLApiClient.Endpoints.Players.Player>
  nameWithType.vb: ReadOnlyCollection(Of Player)
  fullName.vb: ReadOnlyCollection(Of SRLApiClient.Endpoints.Players.Player)
  name.vb: ReadOnlyCollection(Of Player)
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.Players.Player
    name: Player
    nameWithType: Player
    fullName: SRLApiClient.Endpoints.Players.Player
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.Players.Player
    name: Player
    nameWithType: Player
    fullName: SRLApiClient.Endpoints.Players.Player
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync*
  commentId: Overload:SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync
  name: SearchAsync
  nameWithType: PlayersClient.SearchAsync
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.SearchAsync
- uid: Task{ReadOnlyCollection{SRLApiClient.Endpoints.Players.Player}}
  commentId: '!:Task{ReadOnlyCollection{SRLApiClient.Endpoints.Players.Player}}'
  definition: Task`1
  name: Task<ReadOnlyCollection<Player>>
  nameWithType: Task<ReadOnlyCollection<Player>>
  fullName: Task<ReadOnlyCollection<SRLApiClient.Endpoints.Players.Player>>
  nameWithType.vb: Task(Of ReadOnlyCollection(Of Player))
  fullName.vb: Task(Of ReadOnlyCollection(Of SRLApiClient.Endpoints.Players.Player))
  name.vb: Task(Of ReadOnlyCollection(Of Player))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.Players.Player
    name: Player
    nameWithType: Player
    fullName: SRLApiClient.Endpoints.Players.Player
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.Players.Player
    name: Player
    nameWithType: Player
    fullName: SRLApiClient.Endpoints.Players.Player
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Endpoints.Players.PlayersClient.Edit*
  commentId: Overload:SRLApiClient.Endpoints.Players.PlayersClient.Edit
  name: Edit
  nameWithType: PlayersClient.Edit
  fullName: SRLApiClient.Endpoints.Players.PlayersClient.Edit
- uid: SRLApiClient.Endpoints.StreamApi
  commentId: T:SRLApiClient.Endpoints.StreamApi
  parent: SRLApiClient.Endpoints
  name: StreamApi
  nameWithType: StreamApi
  fullName: SRLApiClient.Endpoints.StreamApi
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
