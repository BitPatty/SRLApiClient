### YamlMime:ManagedReference
items:
- uid: SRLApiClient.Extensions.RaceExtensions
  commentId: T:SRLApiClient.Extensions.RaceExtensions
  id: RaceExtensions
  parent: SRLApiClient.Extensions
  children:
  - SRLApiClient.Extensions.RaceExtensions.FilterByEntrant(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  - SRLApiClient.Extensions.RaceExtensions.FilterByGame(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  - SRLApiClient.Extensions.RaceExtensions.FilterById(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  - SRLApiClient.Extensions.RaceExtensions.FilterByMaxState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  - SRLApiClient.Extensions.RaceExtensions.FilterByMinState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  - SRLApiClient.Extensions.RaceExtensions.FilterByState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  langs:
  - csharp
  - vb
  name: RaceExtensions
  nameWithType: RaceExtensions
  fullName: SRLApiClient.Extensions.RaceExtensions
  type: Class
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: RaceExtensions
    path: Extensions/RaceExtensions.cs
    startLine: 11
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nExtensions for the <xref href=\"SRLApiClient.Endpoints.Races.Race\" data-throw-if-not-resolved=\"false\"></xref> type\n"
  example: []
  syntax:
    content: 'public static class RaceExtensions : object'
    content.vb: >-
      Public Module RaceExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByGame(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  commentId: M:SRLApiClient.Extensions.RaceExtensions.FilterByGame(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  id: FilterByGame(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  isExtensionMethod: true
  parent: SRLApiClient.Extensions.RaceExtensions
  langs:
  - csharp
  - vb
  name: FilterByGame(ReadOnlyCollection<Race>, String)
  nameWithType: RaceExtensions.FilterByGame(ReadOnlyCollection<Race>, String)
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByGame(ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>, System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: FilterByGame
    path: Extensions/RaceExtensions.cs
    startLine: 19
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nFilter the race collection by a game abbreviation\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Race> FilterByGame(this ReadOnlyCollection<Race> races, string gameAbbreviation)
    parameters:
    - id: races
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: The original collection to apply the filter on
    - id: gameAbbreviation
      type: System.String
      description: The games abbreviation look for
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: Returns the races with the provided game abbreviation
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FilterByGame(races As ReadOnlyCollection(Of Race), gameAbbreviation As String) As ReadOnlyCollection(Of Race)
  overload: SRLApiClient.Extensions.RaceExtensions.FilterByGame*
  nameWithType.vb: RaceExtensions.FilterByGame(ReadOnlyCollection(Of Race), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SRLApiClient.Extensions.RaceExtensions.FilterByGame(ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race), System.String)
  name.vb: FilterByGame(ReadOnlyCollection(Of Race), String)
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  commentId: M:SRLApiClient.Extensions.RaceExtensions.FilterByState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  id: FilterByState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  isExtensionMethod: true
  parent: SRLApiClient.Extensions.RaceExtensions
  langs:
  - csharp
  - vb
  name: FilterByState(ReadOnlyCollection<Race>, RaceState)
  nameWithType: RaceExtensions.FilterByState(ReadOnlyCollection<Race>, RaceState)
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByState(ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>, SRLApiClient.Endpoints.RaceState)
  type: Method
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: FilterByState
    path: Extensions/RaceExtensions.cs
    startLine: 28
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nFilter the race collection by the race state\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Race> FilterByState(this ReadOnlyCollection<Race> races, RaceState state)
    parameters:
    - id: races
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: The original collection to apply the filter on
    - id: state
      type: SRLApiClient.Endpoints.RaceState
      description: The games abbreviation to look for
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: Returns the races with the provided race state
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FilterByState(races As ReadOnlyCollection(Of Race), state As RaceState) As ReadOnlyCollection(Of Race)
  overload: SRLApiClient.Extensions.RaceExtensions.FilterByState*
  nameWithType.vb: RaceExtensions.FilterByState(ReadOnlyCollection(Of Race), RaceState)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SRLApiClient.Extensions.RaceExtensions.FilterByState(ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race), SRLApiClient.Endpoints.RaceState)
  name.vb: FilterByState(ReadOnlyCollection(Of Race), RaceState)
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByMinState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  commentId: M:SRLApiClient.Extensions.RaceExtensions.FilterByMinState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  id: FilterByMinState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  isExtensionMethod: true
  parent: SRLApiClient.Extensions.RaceExtensions
  langs:
  - csharp
  - vb
  name: FilterByMinState(ReadOnlyCollection<Race>, RaceState)
  nameWithType: RaceExtensions.FilterByMinState(ReadOnlyCollection<Race>, RaceState)
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByMinState(ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>, SRLApiClient.Endpoints.RaceState)
  type: Method
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: FilterByMinState
    path: Extensions/RaceExtensions.cs
    startLine: 37
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nFilter the race collection by a minimum race state\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Race> FilterByMinState(this ReadOnlyCollection<Race> races, RaceState minState)
    parameters:
    - id: races
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: The original collection to apply the filter on
    - id: minState
      type: SRLApiClient.Endpoints.RaceState
      description: The minimum state to keep
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: Returns the races with the state being greater or equal the <code data-dev-comment-type="paramref" class="paramref">minState</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FilterByMinState(races As ReadOnlyCollection(Of Race), minState As RaceState) As ReadOnlyCollection(Of Race)
  overload: SRLApiClient.Extensions.RaceExtensions.FilterByMinState*
  nameWithType.vb: RaceExtensions.FilterByMinState(ReadOnlyCollection(Of Race), RaceState)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SRLApiClient.Extensions.RaceExtensions.FilterByMinState(ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race), SRLApiClient.Endpoints.RaceState)
  name.vb: FilterByMinState(ReadOnlyCollection(Of Race), RaceState)
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByMaxState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  commentId: M:SRLApiClient.Extensions.RaceExtensions.FilterByMaxState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  id: FilterByMaxState(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},SRLApiClient.Endpoints.RaceState)
  isExtensionMethod: true
  parent: SRLApiClient.Extensions.RaceExtensions
  langs:
  - csharp
  - vb
  name: FilterByMaxState(ReadOnlyCollection<Race>, RaceState)
  nameWithType: RaceExtensions.FilterByMaxState(ReadOnlyCollection<Race>, RaceState)
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByMaxState(ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>, SRLApiClient.Endpoints.RaceState)
  type: Method
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: FilterByMaxState
    path: Extensions/RaceExtensions.cs
    startLine: 46
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nFilter the race collection by a maximum race state\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Race> FilterByMaxState(this ReadOnlyCollection<Race> races, RaceState maxState)
    parameters:
    - id: races
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: The original collection to apply the filter on
    - id: maxState
      type: SRLApiClient.Endpoints.RaceState
      description: The maximum state to keep
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: Returns the races with the state bing less or equal the <code data-dev-comment-type="paramref" class="paramref">maxState</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FilterByMaxState(races As ReadOnlyCollection(Of Race), maxState As RaceState) As ReadOnlyCollection(Of Race)
  overload: SRLApiClient.Extensions.RaceExtensions.FilterByMaxState*
  nameWithType.vb: RaceExtensions.FilterByMaxState(ReadOnlyCollection(Of Race), RaceState)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SRLApiClient.Extensions.RaceExtensions.FilterByMaxState(ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race), SRLApiClient.Endpoints.RaceState)
  name.vb: FilterByMaxState(ReadOnlyCollection(Of Race), RaceState)
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByEntrant(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  commentId: M:SRLApiClient.Extensions.RaceExtensions.FilterByEntrant(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  id: FilterByEntrant(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  isExtensionMethod: true
  parent: SRLApiClient.Extensions.RaceExtensions
  langs:
  - csharp
  - vb
  name: FilterByEntrant(ReadOnlyCollection<Race>, String)
  nameWithType: RaceExtensions.FilterByEntrant(ReadOnlyCollection<Race>, String)
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByEntrant(ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>, System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: FilterByEntrant
    path: Extensions/RaceExtensions.cs
    startLine: 55
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nFilter the race collection by an entrants name\n"
  example: []
  syntax:
    content: public static ReadOnlyCollection<Race> FilterByEntrant(this ReadOnlyCollection<Race> races, string playerName)
    parameters:
    - id: races
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: The original collection to apply the filter on
    - id: playerName
      type: System.String
      description: The entrants name
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: Returns the races the provided player joined
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FilterByEntrant(races As ReadOnlyCollection(Of Race), playerName As String) As ReadOnlyCollection(Of Race)
  overload: SRLApiClient.Extensions.RaceExtensions.FilterByEntrant*
  nameWithType.vb: RaceExtensions.FilterByEntrant(ReadOnlyCollection(Of Race), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SRLApiClient.Extensions.RaceExtensions.FilterByEntrant(ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race), System.String)
  name.vb: FilterByEntrant(ReadOnlyCollection(Of Race), String)
- uid: SRLApiClient.Extensions.RaceExtensions.FilterById(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  commentId: M:SRLApiClient.Extensions.RaceExtensions.FilterById(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  id: FilterById(ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race},System.String)
  isExtensionMethod: true
  parent: SRLApiClient.Extensions.RaceExtensions
  langs:
  - csharp
  - vb
  name: FilterById(ReadOnlyCollection<Race>, String)
  nameWithType: RaceExtensions.FilterById(ReadOnlyCollection<Race>, String)
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterById(ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>, System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Extensions/RaceExtensions.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: FilterById
    path: Extensions/RaceExtensions.cs
    startLine: 64
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Extensions
  summary: "\nChecks for a race id in the race collection\n"
  example: []
  syntax:
    content: public static Race FilterById(this ReadOnlyCollection<Race> races, string raceId)
    parameters:
    - id: races
      type: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
      description: The collection to apply the filter on
    - id: raceId
      type: System.String
      description: The races id
    return:
      type: SRLApiClient.Endpoints.Races.Race
      description: Returns the race
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FilterById(races As ReadOnlyCollection(Of Race), raceId As String) As Race
  overload: SRLApiClient.Extensions.RaceExtensions.FilterById*
  nameWithType.vb: RaceExtensions.FilterById(ReadOnlyCollection(Of Race), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: SRLApiClient.Extensions.RaceExtensions.FilterById(ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race), System.String)
  name.vb: FilterById(ReadOnlyCollection(Of Race), String)
references:
- uid: SRLApiClient.Endpoints.Races.Race
  commentId: T:SRLApiClient.Endpoints.Races.Race
  parent: SRLApiClient.Endpoints.Races
  name: Race
  nameWithType: Race
  fullName: SRLApiClient.Endpoints.Races.Race
- uid: SRLApiClient.Extensions
  commentId: N:SRLApiClient.Extensions
  name: SRLApiClient.Extensions
  nameWithType: SRLApiClient.Extensions
  fullName: SRLApiClient.Extensions
- uid: SRLApiClient.Endpoints.Races
  commentId: N:SRLApiClient.Endpoints.Races
  name: SRLApiClient.Endpoints.Races
  nameWithType: SRLApiClient.Endpoints.Races
  fullName: SRLApiClient.Endpoints.Races
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByGame*
  commentId: Overload:SRLApiClient.Extensions.RaceExtensions.FilterByGame
  name: FilterByGame
  nameWithType: RaceExtensions.FilterByGame
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByGame
- uid: ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}
  commentId: '!:ReadOnlyCollection{SRLApiClient.Endpoints.Races.Race}'
  definition: ReadOnlyCollection`1
  name: ReadOnlyCollection<Race>
  nameWithType: ReadOnlyCollection<Race>
  fullName: ReadOnlyCollection<SRLApiClient.Endpoints.Races.Race>
  nameWithType.vb: ReadOnlyCollection(Of Race)
  fullName.vb: ReadOnlyCollection(Of SRLApiClient.Endpoints.Races.Race)
  name.vb: ReadOnlyCollection(Of Race)
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.Races.Race
    name: Race
    nameWithType: Race
    fullName: SRLApiClient.Endpoints.Races.Race
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.Races.Race
    name: Race
    nameWithType: Race
    fullName: SRLApiClient.Endpoints.Races.Race
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByState*
  commentId: Overload:SRLApiClient.Extensions.RaceExtensions.FilterByState
  name: FilterByState
  nameWithType: RaceExtensions.FilterByState
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByState
- uid: SRLApiClient.Endpoints.RaceState
  commentId: T:SRLApiClient.Endpoints.RaceState
  parent: SRLApiClient.Endpoints
  name: RaceState
  nameWithType: RaceState
  fullName: SRLApiClient.Endpoints.RaceState
- uid: SRLApiClient.Endpoints
  commentId: N:SRLApiClient.Endpoints
  name: SRLApiClient.Endpoints
  nameWithType: SRLApiClient.Endpoints
  fullName: SRLApiClient.Endpoints
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByMinState*
  commentId: Overload:SRLApiClient.Extensions.RaceExtensions.FilterByMinState
  name: FilterByMinState
  nameWithType: RaceExtensions.FilterByMinState
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByMinState
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByMaxState*
  commentId: Overload:SRLApiClient.Extensions.RaceExtensions.FilterByMaxState
  name: FilterByMaxState
  nameWithType: RaceExtensions.FilterByMaxState
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByMaxState
- uid: SRLApiClient.Extensions.RaceExtensions.FilterByEntrant*
  commentId: Overload:SRLApiClient.Extensions.RaceExtensions.FilterByEntrant
  name: FilterByEntrant
  nameWithType: RaceExtensions.FilterByEntrant
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterByEntrant
- uid: SRLApiClient.Extensions.RaceExtensions.FilterById*
  commentId: Overload:SRLApiClient.Extensions.RaceExtensions.FilterById
  name: FilterById
  nameWithType: RaceExtensions.FilterById
  fullName: SRLApiClient.Extensions.RaceExtensions.FilterById
