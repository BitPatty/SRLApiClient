### YamlMime:ManagedReference
items:
- uid: SRLApiClient.Endpoints.Countries.CountriesClient
  commentId: T:SRLApiClient.Endpoints.Countries.CountriesClient
  id: CountriesClient
  parent: SRLApiClient.Endpoints.Countries
  children:
  - SRLApiClient.Endpoints.Countries.CountriesClient.#ctor(SRLApiClient.SRLClient)
  - SRLApiClient.Endpoints.Countries.CountriesClient.Get
  - SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync
  langs:
  - csharp
  - vb
  name: CountriesClient
  nameWithType: CountriesClient
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient
  type: Class
  source:
    remote:
      path: SRLApiClient/Endpoints/Countries/CountriesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: CountriesClient
    path: Endpoints/Countries/CountriesClient.cs
    startLine: 10
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Countries
  summary: "\nA client to perform requests on the /country endpoint\n"
  example: []
  syntax:
    content: 'public class CountriesClient : SRLEndpoint'
    content.vb: >-
      Public Class CountriesClient
          Inherits SRLEndpoint
  inheritance:
  - System.Object
  - SRLApiClient.Endpoints.SRLEndpoint
  inheritedMembers:
  - SRLApiClient.Endpoints.SRLEndpoint.BasePath
  - SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SRLApiClient.Endpoints.Countries.CountriesClient.#ctor(SRLApiClient.SRLClient)
  commentId: M:SRLApiClient.Endpoints.Countries.CountriesClient.#ctor(SRLApiClient.SRLClient)
  id: '#ctor(SRLApiClient.SRLClient)'
  parent: SRLApiClient.Endpoints.Countries.CountriesClient
  langs:
  - csharp
  - vb
  name: CountriesClient(SRLClient)
  nameWithType: CountriesClient.CountriesClient(SRLClient)
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient.CountriesClient(SRLApiClient.SRLClient)
  type: Constructor
  source:
    remote:
      path: SRLApiClient/Endpoints/Countries/CountriesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: .ctor
    path: Endpoints/Countries/CountriesClient.cs
    startLine: 16
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Countries
  summary: "\nCreates a new client to perform requests on the /country endpoint\n"
  example: []
  syntax:
    content: public CountriesClient(SRLClient baseClient)
    parameters:
    - id: baseClient
      type: SRLApiClient.SRLClient
      description: The <xref href="SRLApiClient.SRLClient" data-throw-if-not-resolved="false"></xref> used to perform requests
    content.vb: Public Sub New(baseClient As SRLClient)
  overload: SRLApiClient.Endpoints.Countries.CountriesClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Countries.CountriesClient.Get
  commentId: M:SRLApiClient.Endpoints.Countries.CountriesClient.Get
  id: Get
  parent: SRLApiClient.Endpoints.Countries.CountriesClient
  langs:
  - csharp
  - vb
  name: Get()
  nameWithType: CountriesClient.Get()
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient.Get()
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Countries/CountriesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: Get
    path: Endpoints/Countries/CountriesClient.cs
    startLine: 32
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Countries
  summary: "\nGets the list of available countries synchronously\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<string> Get()
    return:
      type: ReadOnlyCollection{System.String}
      description: Returns the list of countries
    content.vb: Public Function Get As ReadOnlyCollection(Of String)
  overload: SRLApiClient.Endpoints.Countries.CountriesClient.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync
  commentId: M:SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync
  id: GetAsync
  parent: SRLApiClient.Endpoints.Countries.CountriesClient
  langs:
  - csharp
  - vb
  name: GetAsync()
  nameWithType: CountriesClient.GetAsync()
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync()
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/Countries/CountriesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: GetAsync
    path: Endpoints/Countries/CountriesClient.cs
    startLine: 39
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.Countries
  summary: "\nGets the list of available countries synchronously\n"
  example: []
  syntax:
    content: public Task<ReadOnlyCollection<string>> GetAsync()
    return:
      type: Task{ReadOnlyCollection{System.String}}
      description: Returns the list of countries
    content.vb: Public Function GetAsync As Task(Of ReadOnlyCollection(Of String))
  overload: SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SRLApiClient.Endpoints.Countries
  commentId: N:SRLApiClient.Endpoints.Countries
  name: SRLApiClient.Endpoints.Countries
  nameWithType: SRLApiClient.Endpoints.Countries
  fullName: SRLApiClient.Endpoints.Countries
- uid: SRLApiClient.Endpoints.SRLEndpoint
  commentId: T:SRLApiClient.Endpoints.SRLEndpoint
  parent: SRLApiClient.Endpoints
  name: SRLEndpoint
  nameWithType: SRLEndpoint
  fullName: SRLApiClient.Endpoints.SRLEndpoint
- uid: SRLApiClient.Endpoints.SRLEndpoint.BasePath
  commentId: P:SRLApiClient.Endpoints.SRLEndpoint.BasePath
  parent: SRLApiClient.Endpoints.SRLEndpoint
  name: BasePath
  nameWithType: SRLEndpoint.BasePath
  fullName: SRLApiClient.Endpoints.SRLEndpoint.BasePath
- uid: SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  commentId: P:SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  parent: SRLApiClient.Endpoints.SRLEndpoint
  name: SrlClient
  nameWithType: SRLEndpoint.SrlClient
  fullName: SRLApiClient.Endpoints.SRLEndpoint.SrlClient
- uid: SRLApiClient.Endpoints
  commentId: N:SRLApiClient.Endpoints
  name: SRLApiClient.Endpoints
  nameWithType: SRLApiClient.Endpoints
  fullName: SRLApiClient.Endpoints
- uid: SRLApiClient.SRLClient
  commentId: T:SRLApiClient.SRLClient
  parent: SRLApiClient
  name: SRLClient
  nameWithType: SRLClient
  fullName: SRLApiClient.SRLClient
- uid: SRLApiClient.Endpoints.Countries.CountriesClient.#ctor*
  commentId: Overload:SRLApiClient.Endpoints.Countries.CountriesClient.#ctor
  name: CountriesClient
  nameWithType: CountriesClient.CountriesClient
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient.CountriesClient
- uid: SRLApiClient
  commentId: N:SRLApiClient
  name: SRLApiClient
  nameWithType: SRLApiClient
  fullName: SRLApiClient
- uid: SRLApiClient.Endpoints.Countries.CountriesClient.Get*
  commentId: Overload:SRLApiClient.Endpoints.Countries.CountriesClient.Get
  name: Get
  nameWithType: CountriesClient.Get
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient.Get
- uid: ReadOnlyCollection{System.String}
  commentId: '!:ReadOnlyCollection{System.String}'
  definition: ReadOnlyCollection`1
  name: ReadOnlyCollection<String>
  nameWithType: ReadOnlyCollection<String>
  fullName: ReadOnlyCollection<System.String>
  nameWithType.vb: ReadOnlyCollection(Of String)
  fullName.vb: ReadOnlyCollection(Of System.String)
  name.vb: ReadOnlyCollection(Of String)
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync*
  commentId: Overload:SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync
  name: GetAsync
  nameWithType: CountriesClient.GetAsync
  fullName: SRLApiClient.Endpoints.Countries.CountriesClient.GetAsync
- uid: Task{ReadOnlyCollection{System.String}}
  commentId: '!:Task{ReadOnlyCollection{System.String}}'
  definition: Task`1
  name: Task<ReadOnlyCollection<String>>
  nameWithType: Task<ReadOnlyCollection<String>>
  fullName: Task<ReadOnlyCollection<System.String>>
  nameWithType.vb: Task(Of ReadOnlyCollection(Of String))
  fullName.vb: Task(Of ReadOnlyCollection(Of System.String))
  name.vb: Task(Of ReadOnlyCollection(Of String))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
