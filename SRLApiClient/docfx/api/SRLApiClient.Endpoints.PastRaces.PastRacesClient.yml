### YamlMime:ManagedReference
items:
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  commentId: T:SRLApiClient.Endpoints.PastRaces.PastRacesClient
  id: PastRacesClient
  parent: SRLApiClient.Endpoints.PastRaces
  children:
  - SRLApiClient.Endpoints.PastRaces.PastRacesClient.#ctor(SRLApiClient.SRLClient)
  - SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String)
  - SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String,System.String,System.Int32,System.Int32)
  - SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String)
  - SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String,System.String,System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: PastRacesClient
  nameWithType: PastRacesClient
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  type: Class
  source:
    remote:
      path: SRLApiClient/Endpoints/PastRaces/PastRacesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: PastRacesClient
    path: Endpoints/PastRaces/PastRacesClient.cs
    startLine: 12
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.PastRaces
  summary: "\nA client to perform requests on the /pastraces endpoint\n"
  example: []
  syntax:
    content: 'public class PastRacesClient : SRLEndpoint'
    content.vb: >-
      Public Class PastRacesClient
          Inherits SRLEndpoint
  inheritance:
  - System.Object
  - SRLApiClient.Endpoints.SRLEndpoint
  inheritedMembers:
  - SRLApiClient.Endpoints.SRLEndpoint.BasePath
  - SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.#ctor(SRLApiClient.SRLClient)
  commentId: M:SRLApiClient.Endpoints.PastRaces.PastRacesClient.#ctor(SRLApiClient.SRLClient)
  id: '#ctor(SRLApiClient.SRLClient)'
  parent: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  langs:
  - csharp
  - vb
  name: PastRacesClient(SRLClient)
  nameWithType: PastRacesClient.PastRacesClient(SRLClient)
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.PastRacesClient(SRLApiClient.SRLClient)
  type: Constructor
  source:
    remote:
      path: SRLApiClient/Endpoints/PastRaces/PastRacesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: .ctor
    path: Endpoints/PastRaces/PastRacesClient.cs
    startLine: 18
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.PastRaces
  summary: "\nCreates a new client to perform requests on the /pastraces endpoint\n"
  example: []
  syntax:
    content: public PastRacesClient(SRLClient baseClient)
    parameters:
    - id: baseClient
      type: SRLApiClient.SRLClient
      description: The <xref href="SRLApiClient.SRLClient" data-throw-if-not-resolved="false"></xref> used to perform requests
    content.vb: Public Sub New(baseClient As SRLClient)
  overload: SRLApiClient.Endpoints.PastRaces.PastRacesClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String,System.String,System.Int32,System.Int32)
  commentId: M:SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String,System.String,System.Int32,System.Int32)
  id: Get(System.String,System.String,System.Int32,System.Int32)
  parent: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  langs:
  - csharp
  - vb
  name: Get(String, String, Int32, Int32)
  nameWithType: PastRacesClient.Get(String, String, Int32, Int32)
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/PastRaces/PastRacesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: Get
    path: Endpoints/PastRaces/PastRacesClient.cs
    startLine: 38
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.PastRaces
  summary: "\nGets a collection of past races synchronously\n"
  example: []
  syntax:
    content: public ReadOnlyCollection<PastRace> Get(string playerName = null, string gameAbbreviation = null, int page = 1, int pageSize = 20)
    parameters:
    - id: playerName
      type: System.String
      description: The players name
    - id: gameAbbreviation
      type: System.String
      description: The games abbreviation
    - id: page
      type: System.Int32
      description: The page number
    - id: pageSize
      type: System.Int32
      description: The page size
    return:
      type: ReadOnlyCollection{SRLApiClient.Endpoints.PastRaces.PastRace}
      description: Returns the race collection
    content.vb: Public Function Get(playerName As String = Nothing, gameAbbreviation As String = Nothing, page As Integer = 1, pageSize As Integer = 20) As ReadOnlyCollection(Of PastRace)
  overload: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String,System.String,System.Int32,System.Int32)
  commentId: M:SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String,System.String,System.Int32,System.Int32)
  id: GetAsync(System.String,System.String,System.Int32,System.Int32)
  parent: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  langs:
  - csharp
  - vb
  name: GetAsync(String, String, Int32, Int32)
  nameWithType: PastRacesClient.GetAsync(String, String, Int32, Int32)
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/PastRaces/PastRacesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: GetAsync
    path: Endpoints/PastRaces/PastRacesClient.cs
    startLine: 57
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.PastRaces
  summary: "\nGets a collection of past races asynchronously\n"
  example: []
  syntax:
    content: public Task<ReadOnlyCollection<PastRace>> GetAsync(string playerName = null, string gameAbbreviation = null, int page = 1, int pageSize = 20)
    parameters:
    - id: playerName
      type: System.String
      description: The players name
    - id: gameAbbreviation
      type: System.String
      description: The games abbreviation
    - id: page
      type: System.Int32
      description: The page number
    - id: pageSize
      type: System.Int32
      description: The page size
    return:
      type: Task{ReadOnlyCollection{SRLApiClient.Endpoints.PastRaces.PastRace}}
      description: Returns the race collection
    content.vb: Public Function GetAsync(playerName As String = Nothing, gameAbbreviation As String = Nothing, page As Integer = 1, pageSize As Integer = 20) As Task(Of ReadOnlyCollection(Of PastRace))
  overload: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String)
  commentId: M:SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String)
  id: Get(System.String)
  parent: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  langs:
  - csharp
  - vb
  name: Get(String)
  nameWithType: PastRacesClient.Get(String)
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get(System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/PastRaces/PastRacesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: Get
    path: Endpoints/PastRaces/PastRacesClient.cs
    startLine: 73
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.PastRaces
  summary: "\nGets a single past race synchronously\n"
  example: []
  syntax:
    content: public PastRace Get(string raceId)
    parameters:
    - id: raceId
      type: System.String
      description: The races id
    return:
      type: SRLApiClient.Endpoints.PastRaces.PastRace
      description: Returns the past race
    content.vb: Public Function Get(raceId As String) As PastRace
  overload: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String)
  commentId: M:SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: SRLApiClient.Endpoints.PastRaces.PastRacesClient
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  nameWithType: PastRacesClient.GetAsync(String)
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: SRLApiClient/Endpoints/PastRaces/PastRacesClient.cs
      branch: master
      repo: git@github.com:BitPatty/SRLApiClient.git
    id: GetAsync
    path: Endpoints/PastRaces/PastRacesClient.cs
    startLine: 84
  assemblies:
  - SRLApiClient
  namespace: SRLApiClient.Endpoints.PastRaces
  summary: "\nGets a single past race asynchronously\n"
  example: []
  syntax:
    content: public Task<PastRace> GetAsync(string raceId)
    parameters:
    - id: raceId
      type: System.String
      description: The races id
    return:
      type: Task{SRLApiClient.Endpoints.PastRaces.PastRace}
      description: Returns the past race
    content.vb: Public Function GetAsync(raceId As String) As Task(Of PastRace)
  overload: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SRLApiClient.Endpoints.PastRaces
  commentId: N:SRLApiClient.Endpoints.PastRaces
  name: SRLApiClient.Endpoints.PastRaces
  nameWithType: SRLApiClient.Endpoints.PastRaces
  fullName: SRLApiClient.Endpoints.PastRaces
- uid: SRLApiClient.Endpoints.SRLEndpoint
  commentId: T:SRLApiClient.Endpoints.SRLEndpoint
  parent: SRLApiClient.Endpoints
  name: SRLEndpoint
  nameWithType: SRLEndpoint
  fullName: SRLApiClient.Endpoints.SRLEndpoint
- uid: SRLApiClient.Endpoints.SRLEndpoint.BasePath
  commentId: P:SRLApiClient.Endpoints.SRLEndpoint.BasePath
  parent: SRLApiClient.Endpoints.SRLEndpoint
  name: BasePath
  nameWithType: SRLEndpoint.BasePath
  fullName: SRLApiClient.Endpoints.SRLEndpoint.BasePath
- uid: SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  commentId: P:SRLApiClient.Endpoints.SRLEndpoint.SrlClient
  parent: SRLApiClient.Endpoints.SRLEndpoint
  name: SrlClient
  nameWithType: SRLEndpoint.SrlClient
  fullName: SRLApiClient.Endpoints.SRLEndpoint.SrlClient
- uid: SRLApiClient.Endpoints
  commentId: N:SRLApiClient.Endpoints
  name: SRLApiClient.Endpoints
  nameWithType: SRLApiClient.Endpoints
  fullName: SRLApiClient.Endpoints
- uid: SRLApiClient.SRLClient
  commentId: T:SRLApiClient.SRLClient
  parent: SRLApiClient
  name: SRLClient
  nameWithType: SRLClient
  fullName: SRLApiClient.SRLClient
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.#ctor*
  commentId: Overload:SRLApiClient.Endpoints.PastRaces.PastRacesClient.#ctor
  name: PastRacesClient
  nameWithType: PastRacesClient.PastRacesClient
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.PastRacesClient
- uid: SRLApiClient
  commentId: N:SRLApiClient
  name: SRLApiClient
  nameWithType: SRLApiClient
  fullName: SRLApiClient
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get*
  commentId: Overload:SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get
  name: Get
  nameWithType: PastRacesClient.Get
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.Get
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: ReadOnlyCollection{SRLApiClient.Endpoints.PastRaces.PastRace}
  commentId: '!:ReadOnlyCollection{SRLApiClient.Endpoints.PastRaces.PastRace}'
  definition: ReadOnlyCollection`1
  name: ReadOnlyCollection<PastRace>
  nameWithType: ReadOnlyCollection<PastRace>
  fullName: ReadOnlyCollection<SRLApiClient.Endpoints.PastRaces.PastRace>
  nameWithType.vb: ReadOnlyCollection(Of PastRace)
  fullName.vb: ReadOnlyCollection(Of SRLApiClient.Endpoints.PastRaces.PastRace)
  name.vb: ReadOnlyCollection(Of PastRace)
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.PastRaces.PastRace
    name: PastRace
    nameWithType: PastRace
    fullName: SRLApiClient.Endpoints.PastRaces.PastRace
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.PastRaces.PastRace
    name: PastRace
    nameWithType: PastRace
    fullName: SRLApiClient.Endpoints.PastRaces.PastRace
  - name: )
    nameWithType: )
    fullName: )
- uid: ReadOnlyCollection`1
  isExternal: true
  name: ReadOnlyCollection<>
  nameWithType: ReadOnlyCollection<>
  fullName: ReadOnlyCollection<>
  nameWithType.vb: ReadOnlyCollection(Of )
  fullName.vb: ReadOnlyCollection(Of )
  name.vb: ReadOnlyCollection(Of )
  spec.csharp:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync*
  commentId: Overload:SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync
  name: GetAsync
  nameWithType: PastRacesClient.GetAsync
  fullName: SRLApiClient.Endpoints.PastRaces.PastRacesClient.GetAsync
- uid: Task{ReadOnlyCollection{SRLApiClient.Endpoints.PastRaces.PastRace}}
  commentId: '!:Task{ReadOnlyCollection{SRLApiClient.Endpoints.PastRaces.PastRace}}'
  definition: Task`1
  name: Task<ReadOnlyCollection<PastRace>>
  nameWithType: Task<ReadOnlyCollection<PastRace>>
  fullName: Task<ReadOnlyCollection<SRLApiClient.Endpoints.PastRaces.PastRace>>
  nameWithType.vb: Task(Of ReadOnlyCollection(Of PastRace))
  fullName.vb: Task(Of ReadOnlyCollection(Of SRLApiClient.Endpoints.PastRaces.PastRace))
  name.vb: Task(Of ReadOnlyCollection(Of PastRace))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.PastRaces.PastRace
    name: PastRace
    nameWithType: PastRace
    fullName: SRLApiClient.Endpoints.PastRaces.PastRace
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.PastRaces.PastRace
    name: PastRace
    nameWithType: PastRace
    fullName: SRLApiClient.Endpoints.PastRaces.PastRace
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: SRLApiClient.Endpoints.PastRaces.PastRace
  commentId: T:SRLApiClient.Endpoints.PastRaces.PastRace
  parent: SRLApiClient.Endpoints.PastRaces
  name: PastRace
  nameWithType: PastRace
  fullName: SRLApiClient.Endpoints.PastRaces.PastRace
- uid: Task{SRLApiClient.Endpoints.PastRaces.PastRace}
  commentId: '!:Task{SRLApiClient.Endpoints.PastRaces.PastRace}'
  definition: Task`1
  name: Task<PastRace>
  nameWithType: Task<PastRace>
  fullName: Task<SRLApiClient.Endpoints.PastRaces.PastRace>
  nameWithType.vb: Task(Of PastRace)
  fullName.vb: Task(Of SRLApiClient.Endpoints.PastRaces.PastRace)
  name.vb: Task(Of PastRace)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SRLApiClient.Endpoints.PastRaces.PastRace
    name: PastRace
    nameWithType: PastRace
    fullName: SRLApiClient.Endpoints.PastRaces.PastRace
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SRLApiClient.Endpoints.PastRaces.PastRace
    name: PastRace
    nameWithType: PastRace
    fullName: SRLApiClient.Endpoints.PastRaces.PastRace
  - name: )
    nameWithType: )
    fullName: )
